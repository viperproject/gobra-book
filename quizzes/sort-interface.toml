[[questions]]
type = "MultipleChoice"
prompt.prompt = """Consider the implementation of `View` for `IntSlice` where we add an additional postcondition.
```go
/*@
ghost
requires acc(s.Mem(), _)
ensures len(res) == len(s)
ensures forall i int :: {res[i]} {s[i]} 0 <= i && i < len(res) ==> unfolding acc(s.Mem(), _) in  res[i] == s[i]
ensures typeOf(res) == type[seq[int]]   // <----- added
decreases
pure func (s IntSlice) View() (ghost res seq[any]) {
	return unfolding acc(s.Mem(), _) in s.viewAux(0, seq[any]{})
}
@*/
```
Which of the following statements is correct?
"""
prompt.distractors = [
    "The postcondition can be established, provided we might have to add a similar postcondition to `viewAux`.",
    "`IntSlice` is no longer a behavioral subtype of `Interface` since the postcondition `typeOf(res) == type[seq[int]]`  is missing in the interface.",
]
answer.answer = "An error is reported. `typeOf` requires an argument of interface type."
context = """A behavioral subtype may have a stronger postcondition."""
id = "00e8d796-81e8-4bb6-9181-1c994221ccf9"

[[questions]]
type = "MultipleChoice"
prompt.prompt = """Consider `LessSpec` from `Interface` where we added a new postcondition.

```go
// @ ghost
// @ requires acc(Mem(), _)
// @ requires 0 <= i && i < len(View())
// @ requires 0 <= j && j < len(View())
// @ ensures let view := View() in view[i] < view[j] // <--- added
// @ decreases len(View())
// @ pure LessSpec(i, j int) bool
```
"""
prompt.distractors = [
    "`acc(Mem(), _)` is required but not ensured. Hence, the precondition of `View` does not hold in the postcondition.",
]
answer.answer = [
    "`View` has type `seq[any]`. `view[i] < view[j]` is not well-defined for values of type `any`.",
    "The interface method `Less` allows different implementations to use different orderings. Fixing it to be based on `<` defeats the purpose."
]
context = """
Gobra reports the error:
``` text
ERROR property error: interface{} is not assignable to integer
	ensures let view := View() in view[i] < view[j]
```

Note that the function is `pure` and does not leak `acc(Mem(), _)`
"""
id = "7929e903-21d4-41fa-bf47-7f146bb97d56"

[[questions]]
type = "MultipleChoice"
prompt.prompt = """Recall the methods `LessSpec` and `Less`:
```go
/*@
ghost
requires acc(s.Mem(), _)
requires 0 <= i && i < len(s.View())
requires 0 <= j && j < len(s.View())
decreases len(s.View())
pure func (s IntSlice) LessSpec(i, j int) (res bool) {
	return unfolding acc(s.Mem(), _) in s[i] < s[j]
}
@*/

// @ requires acc(s.Mem(), 1/1024)
// @ requires 0 <= i && i < len(s.View())
// @ requires 0 <= j && j < len(s.View())
// @ ensures acc(s.Mem(), 1/1024)
// @ ensures res == old(s.LessSpec(i, j))
// @ decreases
func (s IntSlice) Less(i, j int) (res bool) {
	// @ unfold acc(s.Mem(), 1/1024)
	res = s[i] < s[j]
	// @ fold acc(s.Mem(), 1/1024)
}
```

With which of the following expressions can we replace `s[i] < s[j]`,
such that `IntSlice` implements `Interface`.

"""
prompt.distractors = [
    "s[i] % s[j] == 0",
    "s[i] <= s[j]",
    "s[i] != s[j]",
]
answer.answer = ["s[i] < s[j]"]
context = """
- `s[i] % s[j] == 0`  is not well-defined: `Divisor s[j] might be zero.`
- `s[i] <= s[j]` is a not valid. The relation is not irreflexive (and also not asymmetric).
- `s[i] != s[j]`   does give rise to an ordering that is not transitive. The postcondition of `LessIsTransitive` cannot be proven.
"""
id = "ef7234fe-f000-4db8-a0c8-eab3142d6d52"


[[questions]]
type = "MultipleChoice"
prompt.prompt = """Consider the interface method `Swap` and the implementation for `IntSlice`.
```go
// Swap swaps the elements with indices i and j.
// @ requires acc(Mem(), 1)
// @ requires 0 <= i && i < len(View())
// @ requires 0 <= j && j < len(View())
// @ ensures acc(Mem(), 1)
// @ ensures let oldView := old(View()) in
// @ 	let oldi := oldView[i] in
// @ 	let oldj := oldView[j] in
// @ 	View() == oldView[i = oldj][j = oldi]
// @ decreases len(View())
Swap(i, j int)

// @ requires acc(s.Mem(), 1)
// @ requires 0 <= i && i < len(s.View())
// @ requires 0 <= j && j < len(s.View())
// @ ensures acc(s.Mem(), 1)
// @ ensures len(s.View()) == len(old(s.View())) // <---- changed
// @ ensures s.View()[i] === old(s.View())[j]    // <---- changed
// @ ensures s.View()[j] === old(s.View())[i]    // <---- changed
// @ decreases
func (s IntSlice) Swap(i, j int) {
	// @ unfold acc(s.Mem(), 1)
	s[i], s[j] = s[j], s[i]
	// @ fold acc(s.Mem(), 1)
}
```
The postcondition of the implementation has been changed.
With everything else unchanged, does `IntSlice` still implement `Interface`.

"""
prompt.distractors = ["Yes"]
answer.answer = "No"
context = """ The postcondition of the implementation is weaker.
It only specifies that the elements at index `i` and `j` have been swapped and makes no statement about the remaining elements.
The postcondition of the interface method, which requires that all other elements have not changed, does not follow.
"""
id = "cc2dc05c-b327-4eb0-bd52-382e6dcddaf7"
