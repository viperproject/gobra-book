[[questions]]
type = "MultipleChoice"
prompt.prompt = """
**Program 1:**
```go
//@ ensures res >= 0
func square(x int) (res int) {
	return x * x
}
r := square(a)
//@ assert r == a*a
```
What is the verification result of **Program 1**?
"""
prompt.distractors = [
	"Verification Succeeds. `square` has no side effects and always returns `a*a`. Hence the assertion passes.",
	"Timeout. This is a hard problem and cannot be solved in reasonable time.",
]
answer.answer = "Verification Fails. `r==a*a` cannot be established from the postcondition."
context = "Gobra uses modular verification. All we know about functions at call sites is their specification. Here only `r>=0` holds after the call."
id = "d929ba84-7da1-499d-a4fb-6073b811ee66"

[[questions]]
type = "MultipleChoice"
prompt.prompt = """
**Program 2:**
```go
//@ requires false
func dontCallMe()  {}
```
Which of the following programs containing a function with precondition `false` verify?
"""
prompt.distractors = [
    """
```go
//@ requires false
func dontCallMe()  {}

func client() {
     dontCallMe()
}
```
"""
]
answer.answer = ["""
```go
//@ requires false
func dontCallMe()  {}

//@ requires x % 2 == 1
func callMeNeither(x int) {
    if x % 2 == 0 {
        dontCallMe()
    }
}
```
""",
"""
```go
//@ requires false
func dontCallMe()  {}
```
"""
]
context = """
The rule for preconditions is that they must hold whenever a function is called.

1. error: `client` has the default precondition `true`. When `dontCallMe` is called, `false` cannot be deduced.
2. verifies: the precondition `x % 2 == 1` from `callMeNeither` and the branch condition `x % 2 == 0` imply `false`.
3. verifies: `dontCallMe` is never called, which is fine.
"""
id = "aa8a36cf-74bb-4ef1-a718-7c104ae9ef74"
