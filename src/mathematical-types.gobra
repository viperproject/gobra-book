package mathtypes

func sequences()  {
	// ANCHOR: seq
	// The empty sequence
	empty := seq[int]{}
	// len gives the length of the sequence
	assert len(empty) == 0
	// Constructing from a literal
	s := seq[int]{0, 1, 1, 2, 3}
	// Constructing from a range
	s1 := seq[0..5]
	// Comparison with ==
	assert seq[0..5] == seq[int]{0, 1, 2, 3, 4}

	s2 := seq[5..10]
	s3 := seq[0..10]
	// Concatentation of sequences with ++
	assert s1 ++ s2 == s3

	// Slicing sequences
	assert s3[:5] == s1

	arr := [5]int{0, 1, 2, 3, 4}
	// Conversion from an array
	s4 := seq(arr)
	// Conversion from another sequence
	s5 := seq(s4)
	assert s4 == s5

	// ANCHOR_END: seq
}

func sets() {
	// ANCHOR: set
	// The empty set
	empty := seq[int]{}
	s1 := set[int]{1, 2, 3}
	s2 := set[int]{1, 2, 2, 3, 3, 3}
	// Equality
	assert s1 == s2
	// Cardinality
	assert len(s1) == len(s2)

	// Conversion from a sequence
	s3 := set(seq[int]{ 1, 2})
	// Conversion from a set
	s4 := set(s1)

	// Membership
	assert 1 in set[int]{1, 2}
	assert !(0 in set[int]{1, 2})

	// Subset
	assert set[int]{0, 2} subset set[int]{0, 1, 2}
	// Union
	assert set[int]{0, 2} union set[int]{1} == set[int]{0, 1, 2}
	// Intersection
	assert set[int]{0, 1} intersection set[int]{1, 2} == set[int]{1}
	// Set difference
	assert set[int]{0, 1} setminus set[int]{1, 2} == set[int]{0}

	// ANCHOR_END: set

	// TODO Conversion from an option
}

func multisets() {
	// ANCHOR: mset
	m1 := mset[int]{1, 2, 3}
	m2 := mset[int]{1, 2, 2, 3, 3, 3}
	assert len(m1) == 3
	assert len(m2) == 6
	assert m1 != m2

	// Multiplicity
	assert 2 # m2 == 2
	assert 3 # m2 == 3
	assert 4 # m2 == 0

	// TODO conversion form sequence, multiset or option

	// TODO some set operations

	arr := [5]int{0, 1, 2, 3, 4}
	// Conversion from an array
	s4 := mset(arr)

	// ANCHOR_END: mset
}


func dicts() {
	// TODO
	// ANCHOR: dict
	// ANCHOR_END: dict
}
